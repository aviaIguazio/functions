kind: job
metadata:
  name: arc-to-parquet
  tag: ''
  hash: f6d156af4cd8a4287568d4e49bb7fa4c9ec9b242
  project: default
  labels:
    author: yjb
  categories:
  - data-movement
  - utils
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: arc_to_parquet
  entry_points:
    arc_to_parquet:
      name: arc_to_parquet
      doc: 'Open a file/object archive and save as a parquet file or dataset


        Notes

        -----

        * this function is typically for large files, please be sure to check all
        settings

        * partitioning requires precise specification of column types.

        * the archive_url can be any file readable by pandas read_csv, which includes
        tar files

        * if the `dataset` parameter is not empty, then a partitioned dataset will
        be created

        instead of a single file in the folder `dataset`

        * if a key exists already then it will not be re-acquired unless the `refresh_data`
        param

        is set to `True`.  This is in case the original file is corrupt, or a refresh
        is

        required.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
        default: ''
      - name: archive_url
        type: DataItem
        doc: MLRun data input (DataItem object)
        default: ''
      - name: header
        type: List[str]
        default:
        - null
      - name: chunksize
        type: int
        doc: (0) when > 0, row size (chunk) to retrieve per iteration
        default: 0
      - name: dtype
        default: null
      - name: encoding
        type: str
        default: latin-1
      - name: key
        type: str
        doc: key in artifact store (when log_data=True)
        default: data
      - name: dataset
        type: str
        doc: (None) if not None then "target_path/dataset" is folder for partitioned
          files
        default: None
      - name: part_cols
        doc: ([]) list of partitioning columns
        default: []
      - name: file_ext
        type: str
        doc: (parquet) csv/parquet file extension
        default: parquet
      - name: index
        type: bool
        doc: (False) pandas save index option
        default: false
      - name: refresh_data
        type: bool
        doc: (False) overwrite existing data at that location
        default: false
      - name: stats
        type: bool
        doc: (None) calculate table stats when logging artifact
        default: false
      outputs:
      - default: ''
      lineno: 50
  description: retrieve remote archive, open and save as parquet
  build:
    functionSourceCode: aW1wb3J0IG9zCmltcG9ydCBwYW5kYXMgYXMgcGQKaW1wb3J0IHB5YXJyb3cucGFycXVldCBhcyBwcQppbXBvcnQgcHlhcnJvdyBhcyBwYQoKZnJvbSBtbHJ1bi5leGVjdXRpb24gaW1wb3J0IE1MQ2xpZW50Q3R4CmZyb20gbWxydW4uZGF0YXN0b3JlIGltcG9ydCBEYXRhSXRlbQoKZnJvbSB0eXBpbmcgaW1wb3J0IExpc3QKCgpkZWYgX2NodW5rX3JlYWR3cml0ZSgKICAgICAgICBhcmNoaXZlX3VybCwKICAgICAgICBkZXN0X3BhdGgsCiAgICAgICAgY2h1bmtzaXplLAogICAgICAgIGhlYWRlciwKICAgICAgICBlbmNvZGluZywKICAgICAgICBkdHlwZQopOgogICAgIiIic3RyZWFtIHJlYWQgYW5kIHdyaXRlIGFyY2hpdmVzCgogICAgcGFuZGFzIHJlYWRzIGFuZCBwYXJxdWV0IHdyaXRlcwoKICAgIG5vdGVzCiAgICAtLS0tLQogICAgKiBkZXN0X3BhdGggY2FuIGJlIGVpdGhlciBhIGZpbGUucGFycXVldCwgb3IgaW4gaHRlIGNhc2Ugb2YgcGFydGl0aW9uZWQgcGFycXVldAogICAgICBpdCB3aWxsIGJlIG9ubHkgdGhlIGRlc3RpbmF0aW9uIGZvbGRlciBvZiB0aGUgcGFycXVldCBwYXJ0aXRpb24gZmlsZXMKICAgICIiIgogICAgcHF3cml0ZXIgPSBOb25lCiAgICBoZWFkZXIgPSBbXQogICAgZm9yIGksIGRmIGluIGVudW1lcmF0ZShwZC5yZWFkX2NzdihhcmNoaXZlX3VybCwgY2h1bmtzaXplPWNodW5rc2l6ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM9aGVhZGVyLCBlbmNvZGluZz1lbmNvZGluZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHR5cGU9ZHR5cGUpKToKICAgICAgICB0YWJsZSA9IHBhLlRhYmxlLmZyb21fcGFuZGFzKGRmKQogICAgICAgIGlmIGkgPT0gMDoKICAgICAgICAgICAgaWYgZGF0YXNldDoKICAgICAgICAgICAgICAgIGhlYWRlciA9IGNvcHkodGFibGUuc2NoZW1hKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHF3cml0ZXIgPSBwcS5QYXJxdWV0V3JpdGVyKGRlc3RfcGF0aCwgdGFibGUuc2NoZW1hKQogICAgICAgIGlmIGRhdGFzZXQ6CiAgICAgICAgICAgIHBxLndyaXRlX3RvX2RhdGFzZXQodGFibGUsIHJvb3RfcGF0aD1kZXN0X3BhdGgsIHBhcnRpdGlvbl9jb2xzPXBhcnRpdGlvbl9jb2xzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBxd3JpdGVyLndyaXRlX3RhYmxlKHRhYmxlKQogICAgaWYgcHF3cml0ZXI6CiAgICAgICAgcHF3cml0ZXIuY2xvc2UoKQoKICAgIHJldHVybiBoZWFkZXIKCgpkZWYgYXJjX3RvX3BhcnF1ZXQoCiAgICAgICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICAgICAgYXJjaGl2ZV91cmw6IERhdGFJdGVtLAogICAgICAgIGhlYWRlcjogTGlzdFtzdHJdID0gW05vbmVdLAogICAgICAgIGNodW5rc2l6ZTogaW50ID0gMCwKICAgICAgICBkdHlwZT1Ob25lLAogICAgICAgIGVuY29kaW5nOiBzdHIgPSAibGF0aW4tMSIsCiAgICAgICAga2V5OiBzdHIgPSAiZGF0YSIsCiAgICAgICAgZGF0YXNldDogc3RyID0gIk5vbmUiLAogICAgICAgIHBhcnRfY29scz1bXSwKICAgICAgICBmaWxlX2V4dDogc3RyID0gInBhcnF1ZXQiLAogICAgICAgIGluZGV4OiBib29sID0gRmFsc2UsCiAgICAgICAgcmVmcmVzaF9kYXRhOiBib29sID0gRmFsc2UsCiAgICAgICAgc3RhdHM6IGJvb2wgPSBGYWxzZQopIC0+IE5vbmU6CiAgICAiIiJPcGVuIGEgZmlsZS9vYmplY3QgYXJjaGl2ZSBhbmQgc2F2ZSBhcyBhIHBhcnF1ZXQgZmlsZSBvciBkYXRhc2V0CgogICAgTm90ZXMKICAgIC0tLS0tCiAgICAqIHRoaXMgZnVuY3Rpb24gaXMgdHlwaWNhbGx5IGZvciBsYXJnZSBmaWxlcywgcGxlYXNlIGJlIHN1cmUgdG8gY2hlY2sgYWxsIHNldHRpbmdzCiAgICAqIHBhcnRpdGlvbmluZyByZXF1aXJlcyBwcmVjaXNlIHNwZWNpZmljYXRpb24gb2YgY29sdW1uIHR5cGVzLgogICAgKiB0aGUgYXJjaGl2ZV91cmwgY2FuIGJlIGFueSBmaWxlIHJlYWRhYmxlIGJ5IHBhbmRhcyByZWFkX2Nzdiwgd2hpY2ggaW5jbHVkZXMgdGFyIGZpbGVzCiAgICAqIGlmIHRoZSBgZGF0YXNldGAgcGFyYW1ldGVyIGlzIG5vdCBlbXB0eSwgdGhlbiBhIHBhcnRpdGlvbmVkIGRhdGFzZXQgd2lsbCBiZSBjcmVhdGVkCiAgICBpbnN0ZWFkIG9mIGEgc2luZ2xlIGZpbGUgaW4gdGhlIGZvbGRlciBgZGF0YXNldGAKICAgICogaWYgYSBrZXkgZXhpc3RzIGFscmVhZHkgdGhlbiBpdCB3aWxsIG5vdCBiZSByZS1hY3F1aXJlZCB1bmxlc3MgdGhlIGByZWZyZXNoX2RhdGFgIHBhcmFtCiAgICBpcyBzZXQgdG8gYFRydWVgLiAgVGhpcyBpcyBpbiBjYXNlIHRoZSBvcmlnaW5hbCBmaWxlIGlzIGNvcnJ1cHQsIG9yIGEgcmVmcmVzaCBpcwogICAgcmVxdWlyZWQuCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICB0aGUgZnVuY3Rpb24gY29udGV4dAogICAgOnBhcmFtIGFyY2hpdmVfdXJsOiAgICBNTFJ1biBkYXRhIGlucHV0IChEYXRhSXRlbSBvYmplY3QpCiAgICA6cGFyYW0gY2h1bmtzaXplOiAgICAgICgwKSB3aGVuID4gMCwgcm93IHNpemUgKGNodW5rKSB0byByZXRyaWV2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICBwZXIgaXRlcmF0aW9uCiAgICA6cGFyYW0gZHR5cGUgICAgICAgICAgIGRlc3RpbmF0aW9uIGRhdGEgdHlwZSBvZiBzcGVjaWZpZWQgY29sdW1ucwogICAgOnBhcmFtIGVuY29kaW5nICAgICAgICAoImxhdGluLTgiKSBmaWxlIGVuY29kaW5nCiAgICA6cGFyYW0ga2V5OiAgICAgICAgICAgIGtleSBpbiBhcnRpZmFjdCBzdG9yZSAod2hlbiBsb2dfZGF0YT1UcnVlKQogICAgOnBhcmFtIGRhdGFzZXQ6ICAgICAgICAoTm9uZSkgaWYgbm90IE5vbmUgdGhlbiAidGFyZ2V0X3BhdGgvZGF0YXNldCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZm9sZGVyIGZvciBwYXJ0aXRpb25lZCBmaWxlcwogICAgOnBhcmFtIHBhcnRfY29sczogICAgICAoW10pIGxpc3Qgb2YgcGFydGl0aW9uaW5nIGNvbHVtbnMKICAgIDpwYXJhbSBmaWxlX2V4dDogICAgICAgKHBhcnF1ZXQpIGNzdi9wYXJxdWV0IGZpbGUgZXh0ZW5zaW9uCiAgICA6cGFyYW0gaW5kZXg6ICAgICAgICAgIChGYWxzZSkgcGFuZGFzIHNhdmUgaW5kZXggb3B0aW9uCiAgICA6cGFyYW0gcmVmcmVzaF9kYXRhOiAgIChGYWxzZSkgb3ZlcndyaXRlIGV4aXN0aW5nIGRhdGEgYXQgdGhhdCBsb2NhdGlvbgogICAgOnBhcmFtIHN0YXRzOiAgICAgICAgICAoTm9uZSkgY2FsY3VsYXRlIHRhYmxlIHN0YXRzIHdoZW4gbG9nZ2luZyBhcnRpZmFjdAogICAgIiIiCiAgICBiYXNlX3BhdGggPSBjb250ZXh0LmFydGlmYWN0X3BhdGgKICAgIG9zLm1ha2VkaXJzKGJhc2VfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKCiAgICBhcmNoaXZlX3VybCA9IGFyY2hpdmVfdXJsLmxvY2FsKCkKCiAgICBpZiBkYXRhc2V0IGlzIG5vdCBOb25lOgogICAgICAgIGRlc3RfcGF0aCA9IG9zLnBhdGguam9pbihiYXNlX3BhdGgsIGRhdGFzZXQpCiAgICAgICAgZXhpc3RzID0gb3MucGF0aC5pc2RpcihkZXN0X3BhdGgpCiAgICBlbHNlOgogICAgICAgIGRlc3RfcGF0aCA9IG9zLnBhdGguam9pbihiYXNlX3BhdGgsIGtleSArIGYiLntmaWxlX2V4dH0iKQogICAgICAgIGV4aXN0cyA9IG9zLnBhdGguaXNmaWxlKGRlc3RfcGF0aCkKCiAgICBpZiBub3QgZXhpc3RzOgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oImRlc3RpbmF0aW9uIGZpbGUgZG9lcyBub3QgZXhpc3QsIGRvd25sb2FkaW5nIikKICAgICAgICBpZiBjaHVua3NpemUgPiAwOgogICAgICAgICAgICBoZWFkZXIgPSBfY2h1bmtfcmVhZHdyaXRlKGFyY2hpdmVfdXJsLCBkZXN0X3BhdGgsIGNodW5rc2l6ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZywgZHR5cGUpCiAgICAgICAgICAgIGNvbnRleHQubG9nX2RhdGFzZXQoa2V5PWtleSwgc3RhdHM9c3RhdHMsIGZvcm1hdD0ncGFycXVldCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X3BhdGg9ZGVzdF9wYXRoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRmID0gcGQucmVhZF9jc3YoYXJjaGl2ZV91cmwpCiAgICAgICAgICAgIGNvbnRleHQubG9nX2RhdGFzZXQoa2V5LCBkZj1kZiwgZm9ybWF0PWZpbGVfZXh0LCBpbmRleD1pbmRleCkKICAgIGVsc2U6CiAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbygiZGVzdGluYXRpb24gZmlsZSBhbHJlYWR5IGV4aXN0cywgbm90aGluZyBkb25lIik=
    commands:
    - python -m pip install mlrun==0.6.2 pandas pyarrow
    code_origin: http://github.com/aviaIguazio/functions.git#8016687176a82e144eb872aab2fc9b4640655896:arc_to_parquet.py
  affinity: null
verbose: false
